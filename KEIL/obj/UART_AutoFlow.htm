<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\UART_AutoFlow.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\UART_AutoFlow.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed Aug 30 17:41:27 2023
<BR><P>
<H3>Maximum Stack Usage =        120 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
UART1_IRQHandler &rArr; UART1_TEST_HANDLE &rArr; TIMER_Delay &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[f]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[36]">ACMP01_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[a]">BOD_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[54]">BPWM0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[55]">BPWM1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[22]">BRAKE0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[26]">BRAKE1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[41]">CAN0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[42]">CAN1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[69]">CAN2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[57]">CCAP_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[e]">CKFAIL_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4d]">CRYPTO_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[33]">DAC_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[f]">Default_Handler</a> from startup_m480.o(.text) referenced 14 times from startup_m480.o(RESET)
 <LI><a href="#[34]">EADC00_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[35]">EADC01_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[37]">EADC02_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[38]">EADC03_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[65]">EADC10_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[66]">EADC11_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[67]">EADC12_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[68]">EADC13_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5b]">ECAP0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5c]">ECAP1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[60]">EHCI_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[14]">EINT0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[15]">EINT1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[16]">EINT2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[17]">EINT3_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[18]">EINT4_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[19]">EINT5_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4f]">EINT6_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5e]">EINT7_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4a]">EMAC_RX_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[49]">EMAC_TX_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[23]">EPWM0P0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[24]">EPWM0P1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[25]">EPWM0P2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[27]">EPWM1P0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[28]">EPWM1P1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[29]">EPWM1P2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1a]">GPA_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1b]">GPB_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1c]">GPC_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1d]">GPD_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1e]">GPE_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1f]">GPF_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4e]">GPG_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5d]">GPH_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from retarget.o(.emb_text) referenced from startup_m480.o(RESET)
 <LI><a href="#[6b]">Hard_Fault_Handler</a> from retarget.o(.text) referenced from retarget.o(.emb_text)
 <LI><a href="#[30]">I2C0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[31]">I2C1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[58]">I2C2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4b]">I2S0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[b]">IRC_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3f]">OHCI_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4c]">OPA0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[32]">PDMA_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[c]">PWRWU_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[59]">QEI0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5a]">QEI1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[20]">QSPI0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3b]">QSPI1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[d]">RAMPE_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[6f]">Reset_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[43]">SC0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[44]">SC1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[45]">SC2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[47]">SDH0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5f]">SDH1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[21]">SPI0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3c]">SPI1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3d]">SPI2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[46]">SPI3_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[56]">SPIM_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[6c]">SystemInit</a> from system_m480.o(.text) referenced from startup_m480.o(.text)
 <LI><a href="#[11]">TAMPER_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2a]">TMR0_IRQHandler</a> from main.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2b]">TMR1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2c]">TMR2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2d]">TMR3_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[62]">TRNG_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2e]">UART0_IRQHandler</a> from dependencies.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2f]">UART1_IRQHandler</a> from dependencies.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[39]">UART2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3a]">UART3_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[50]">UART4_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[51]">UART5_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[63]">UART6_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[64]">UART7_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[48]">USBD20_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3e]">USBD_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[61]">USBOTG20_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[40]">USBOTG_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[52]">USCI0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[53]">USCI1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[12]">WDT_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[13]">WWDT_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[6d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_m480.o(.text)
 <LI><a href="#[6e]">fputc</a> from retarget.o(.text) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[6a]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(.text)
</UL>
<P><STRONG><a name="[ef]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[72]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ec]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[f0]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[f1]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[f2]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[f3]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[f4]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[f5]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, retarget.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system_m480.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
</UL>

<P><STRONG><a name="[6c]"></a>SystemInit</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, system_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>Reset_Handler</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, startup_m480.o(.text))

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>ACMP01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>BPWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>BPWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>BRAKE0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>BRAKE1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>CAN2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>CCAP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>CKFAIL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CRYPTO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EADC00_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EADC01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EADC02_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EADC03_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>EADC10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>EADC11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>EADC12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>EADC13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>ECAP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>ECAP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>EHCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EINT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EINT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>EINT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>EINT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>EMAC_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>EMAC_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EPWM0P0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EPWM0P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EPWM0P2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EPWM1P0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EPWM1P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EPWM1P2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>GPA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>GPB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>GPC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>GPD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>GPE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>GPF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>GPG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>GPH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>I2S0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>IRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>OHCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>OPA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>PDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>QEI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>QEI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>QSPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>QSPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RAMPE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SDH0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SDH1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>SPIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>UART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>USBD20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>USBOTG20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USBOTG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>USCI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>USCI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TMR0_IRQHandler</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TMR0_IRQHandler &rArr; TIMER_Delay &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_timeout_occured
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_overload_display
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_weld_record
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_timeout
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_setting_2
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_setting_1
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_overload
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_lock_freq
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_head_test
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_head_down
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_early_after_trigger
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_SectionVib
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>main</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = main &rArr; TIMER_Open &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_interrrupt
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_interrrupt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[ce]"></a>write_amplitude_head_test_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_mcu
</UL>

<P><STRONG><a name="[c6]"></a>write_amplitude_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_mcu
</UL>

<P><STRONG><a name="[d1]"></a>write_timeout_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_mcu
</UL>

<P><STRONG><a name="[cf]"></a>write_force_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_mcu
</UL>

<P><STRONG><a name="[d0]"></a>write_hold_time_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_mcu
</UL>

<P><STRONG><a name="[a2]"></a>read_amplitude_set_display</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_setting_1
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_head_test
</UL>

<P><STRONG><a name="[a4]"></a>read_timeout_set_display</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_setting_2
</UL>

<P><STRONG><a name="[a1]"></a>read_force_set_display</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_weld_record
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_setting_1
</UL>

<P><STRONG><a name="[a3]"></a>read_hold_time_display</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_setting_1
</UL>

<P><STRONG><a name="[c7]"></a>write_mode_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_mcu
</UL>

<P><STRONG><a name="[cb]"></a>write_distance_absolute_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_mcu
</UL>

<P><STRONG><a name="[ca]"></a>write_distance_relative_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_mcu
</UL>

<P><STRONG><a name="[cd]"></a>write_energy_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_mcu
</UL>

<P><STRONG><a name="[c9]"></a>write_time_set_stage_one_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_mcu
</UL>

<P><STRONG><a name="[cc]"></a>write_power_stage_one_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_mcu
</UL>

<P><STRONG><a name="[97]"></a>read_mode_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_setting_1
</UL>

<P><STRONG><a name="[9c]"></a>read_distance_absolute_set_display</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_setting_1
</UL>

<P><STRONG><a name="[9b]"></a>read_distance_relative_set_display</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_setting_1
</UL>

<P><STRONG><a name="[9d]"></a>read_energy_set_display</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_setting_1
</UL>

<P><STRONG><a name="[98]"></a>read_time_set_stage_one_display</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_setting_1
</UL>

<P><STRONG><a name="[9e]"></a>read_power_stage_one_display</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_setting_1
</UL>

<P><STRONG><a name="[d2]"></a>write_amplitudeA_set_stage2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_mcu
</UL>

<P><STRONG><a name="[d3]"></a>write_amplitudeB_set_stage2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_mcu
</UL>

<P><STRONG><a name="[d5]"></a>write_distance_set_stage2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_mcu
</UL>

<P><STRONG><a name="[d6]"></a>write_power_set_stage2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_mcu
</UL>

<P><STRONG><a name="[d7]"></a>write_energy_set_stage2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_mcu
</UL>

<P><STRONG><a name="[d4]"></a>write_time_set_stage2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_mcu
</UL>

<P><STRONG><a name="[c8]"></a>write_stage2_mode_address_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_mcu
</UL>

<P><STRONG><a name="[a7]"></a>read_stage2_mode_address_display</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_mcu
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_SectionVib
</UL>

<P><STRONG><a name="[a5]"></a>read_amplitudeA_set_stage2_display</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_SectionVib
</UL>

<P><STRONG><a name="[a6]"></a>read_amplitudeB_set_stage2_display</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_SectionVib
</UL>

<P><STRONG><a name="[a8]"></a>read_time_set_stage2_display</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_SectionVib
</UL>

<P><STRONG><a name="[a9]"></a>read_distance_set_stage2_display</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_SectionVib
</UL>

<P><STRONG><a name="[aa]"></a>read_power_set_stage2_display</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_SectionVib
</UL>

<P><STRONG><a name="[ab]"></a>read_energy_set_stage2_display</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_SectionVib
</UL>

<P><STRONG><a name="[9a]"></a>read_stage2_mode_address_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_setting_1
</UL>

<P><STRONG><a name="[db]"></a>write_power_early_stage_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_mcu
</UL>

<P><STRONG><a name="[da]"></a>write_mode_early_stage_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_mcu
</UL>

<P><STRONG><a name="[d8]"></a>write_time_early_trigger_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_mcu
</UL>

<P><STRONG><a name="[d9]"></a>write_distance_early_trigger_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_mcu
</UL>

<P><STRONG><a name="[c3]"></a>read_power_early_stage_display</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_early_after_trigger
</UL>

<P><STRONG><a name="[9f]"></a>read_mode_early_stage_display</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_setting_1
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_early_after_trigger
</UL>

<P><STRONG><a name="[c2]"></a>read_time_early_trigger_display</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_early_after_trigger
</UL>

<P><STRONG><a name="[c4]"></a>read_distance_early_trigger_display</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_early_after_trigger
</UL>

<P><STRONG><a name="[df]"></a>write_power_after_stage_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_mcu
</UL>

<P><STRONG><a name="[de]"></a>write_mode_after_stage_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_mcu
</UL>

<P><STRONG><a name="[dc]"></a>write_time_after_trigger_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_mcu
</UL>

<P><STRONG><a name="[dd]"></a>write_distance_after_trigger_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_mcu
</UL>

<P><STRONG><a name="[e0]"></a>write_time_on_after_stage_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_mcu
</UL>

<P><STRONG><a name="[c0]"></a>read_power_after_stage_display</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_early_after_trigger
</UL>

<P><STRONG><a name="[a0]"></a>read_mode_after_stage_display</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_setting_1
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_early_after_trigger
</UL>

<P><STRONG><a name="[bf]"></a>read_time_after_trigger_display</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_early_after_trigger
</UL>

<P><STRONG><a name="[c5]"></a>read_distance_after_trigger_display</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_early_after_trigger
</UL>

<P><STRONG><a name="[c1]"></a>read_time_on_after_stage_display</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_early_after_trigger
</UL>

<P><STRONG><a name="[76]"></a>read_overload_display</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>read_power_read_display</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_head_test
</UL>

<P><STRONG><a name="[b2]"></a>read_freq_min</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_weld_record
</UL>

<P><STRONG><a name="[b1]"></a>read_freq_max</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_weld_record
</UL>

<P><STRONG><a name="[af]"></a>read_freq_start</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_weld_record
</UL>

<P><STRONG><a name="[b0]"></a>read_freq_end</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_weld_record
</UL>

<P><STRONG><a name="[b9]"></a>read_F_start</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_weld_record
</UL>

<P><STRONG><a name="[ba]"></a>read_F_max</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_weld_record
</UL>

<P><STRONG><a name="[b3]"></a>read_P_max</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_weld_record
</UL>

<P><STRONG><a name="[b7]"></a>read_distance_travelled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_weld_record
</UL>

<P><STRONG><a name="[b8]"></a>read_distance_reached</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_weld_record
</UL>

<P><STRONG><a name="[b6]"></a>read_time_on</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_weld_record
</UL>

<P><STRONG><a name="[78]"></a>read_timeout_occured</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IRQHandler
</UL>

<P><STRONG><a name="[bb]"></a>read_collapse_hold</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_weld_record
</UL>

<P><STRONG><a name="[bc]"></a>read_absolute_hold</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_weld_record
</UL>

<P><STRONG><a name="[bd]"></a>read_freq_display</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_head_test
</UL>

<P><STRONG><a name="[ad]"></a>read_force_display</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_head_down
</UL>

<P><STRONG><a name="[ae]"></a>read_distance_display</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_head_down
</UL>

<P><STRONG><a name="[b4]"></a>read_energy_display</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_weld_record
</UL>

<P><STRONG><a name="[ac]"></a>read_pressure_display</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_head_down
</UL>

<P><STRONG><a name="[b5]"></a>read_total_time_display</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_weld_record
</UL>

<P><STRONG><a name="[8b]"></a>fpga_to_mcu</STRONG> (Thumb, 302 bytes, Stack size 12 bytes, dependencies.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fpga_to_mcu
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_TEST_HANDLE
</UL>

<P><STRONG><a name="[8c]"></a>mcu_to_fpga</STRONG> (Thumb, 808 bytes, Stack size 36 bytes, dependencies.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mcu_to_fpga
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_TEST_HANDLE
</UL>

<P><STRONG><a name="[8a]"></a>UART0_TEST_HANDLE</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, dependencies.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UART0_TEST_HANDLE &rArr; TIMER_Delay &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_to_fpga
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpga_to_mcu
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[8d]"></a>UART1_TEST_HANDLE</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, dependencies.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UART1_TEST_HANDLE &rArr; TIMER_Delay &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_mcu
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[88]"></a>UART1_interrrupt</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dependencies.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_interrrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetTimeoutCnt
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>UART0_interrrupt</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dependencies.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_interrrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetTimeoutCnt
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>SYS_Init</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, dependencies.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SYS_Init &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_WaitClockReady
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>UART0_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART0_Init &rArr; UART_Open &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>UART1_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART1_Init &rArr; UART_Open &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f]"></a>UART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UART1_IRQHandler &rArr; UART1_TEST_HANDLE &rArr; TIMER_Delay &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_TEST_HANDLE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>UART0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UART0_IRQHandler &rArr; UART0_TEST_HANDLE &rArr; TIMER_Delay &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_TEST_HANDLE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>binary_to_bcd_array</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, mcu_display_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = binary_to_bcd_array
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_weld_record
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_setting_2
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_setting_1
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_head_test
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_head_down
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_early_after_trigger
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_SectionVib
</UL>

<P><STRONG><a name="[7b]"></a>print_page_lock_freq</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mcu_display_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = print_page_lock_freq &rArr; UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IRQHandler
</UL>

<P><STRONG><a name="[77]"></a>print_page_overload</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mcu_display_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = print_page_overload &rArr; UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IRQHandler
</UL>

<P><STRONG><a name="[79]"></a>print_page_timeout</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mcu_display_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = print_page_timeout &rArr; UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IRQHandler
</UL>

<P><STRONG><a name="[7c]"></a>print_page_setting_1</STRONG> (Thumb, 428 bytes, Stack size 16 bytes, mcu_display_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = print_page_setting_1 &rArr; UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mode_after_stage_display
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mode_early_stage_display
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_stage2_mode_address_set
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_stage_one_display
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_time_set_stage_one_display
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_energy_set_display
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_distance_relative_set_display
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_distance_absolute_set_display
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mode_set
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hold_time_display
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_force_set_display
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_amplitude_set_display
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binary_to_bcd_array
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IRQHandler
</UL>

<P><STRONG><a name="[7d]"></a>print_page_setting_2</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mcu_display_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = print_page_setting_2 &rArr; UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_timeout_set_display
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binary_to_bcd_array
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IRQHandler
</UL>

<P><STRONG><a name="[7e]"></a>print_page_SectionVib</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, mcu_display_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = print_page_SectionVib &rArr; UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_energy_set_stage2_display
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_set_stage2_display
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_distance_set_stage2_display
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_time_set_stage2_display
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_amplitudeB_set_stage2_display
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_amplitudeA_set_stage2_display
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_stage2_mode_address_display
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binary_to_bcd_array
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IRQHandler
</UL>

<P><STRONG><a name="[81]"></a>print_page_head_down</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, mcu_display_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = print_page_head_down &rArr; UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_pressure_display
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_distance_display
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_force_display
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binary_to_bcd_array
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IRQHandler
</UL>

<P><STRONG><a name="[80]"></a>print_page_weld_record</STRONG> (Thumb, 1146 bytes, Stack size 24 bytes, mcu_display_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = print_page_weld_record &rArr; UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_total_time_display
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_energy_display
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_absolute_hold
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_collapse_hold
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_time_on
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_distance_reached
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_distance_travelled
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_P_max
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_F_max
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_F_start
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_freq_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_freq_start
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_freq_max
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_freq_min
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_force_set_display
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binary_to_bcd_array
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IRQHandler
</UL>

<P><STRONG><a name="[82]"></a>print_page_head_test</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, mcu_display_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = print_page_head_test &rArr; UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_freq_display
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_read_display
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_amplitude_set_display
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binary_to_bcd_array
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IRQHandler
</UL>

<P><STRONG><a name="[7f]"></a>print_page_early_after_trigger</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, mcu_display_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = print_page_early_after_trigger &rArr; UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_time_on_after_stage_display
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_distance_after_trigger_display
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_time_after_trigger_display
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mode_after_stage_display
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_after_stage_display
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_distance_early_trigger_display
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_time_early_trigger_display
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mode_early_stage_display
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_early_stage_display
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binary_to_bcd_array
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IRQHandler
</UL>

<P><STRONG><a name="[8e]"></a>display_to_mcu</STRONG> (Thumb, 570 bytes, Stack size 24 bytes, mcu_display_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = display_to_mcu
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_time_on_after_stage_set
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_distance_after_trigger_set
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_time_after_trigger_set
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_mode_after_stage_set
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_power_after_stage_set
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_distance_early_trigger_set
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_time_early_trigger_set
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_mode_early_stage_set
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_power_early_stage_set
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_stage2_mode_address_display
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_stage2_mode_address_set
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_time_set_stage2
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_energy_set_stage2
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_power_set_stage2
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_distance_set_stage2
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_amplitudeB_set_stage2
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_amplitudeA_set_stage2
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_power_stage_one_set
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_time_set_stage_one_set
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_energy_set
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_distance_relative_set
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_distance_absolute_set
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_mode_set
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_hold_time_set
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_force_set
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_timeout_set
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_amplitude_set
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_amplitude_head_test_set
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_TEST_HANDLE
</UL>

<P><STRONG><a name="[6b]"></a>Hard_Fault_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Hard_Fault_Handler &rArr; stackDump &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retarget.o(.emb_text)
</UL>
<P><STRONG><a name="[6e]"></a>fputc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL>
<P><STRONG><a name="[94]"></a>CLK_SetModuleClock</STRONG> (Thumb, 140 bytes, Stack size 20 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[93]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[e2]"></a>CLK_GetPCLK0Freq</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLK_GetPCLK0Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
</UL>

<P><STRONG><a name="[e3]"></a>CLK_GetPCLK1Freq</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
</UL>

<P><STRONG><a name="[91]"></a>CLK_WaitClockReady</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
</UL>

<P><STRONG><a name="[e4]"></a>CLK_SetHCLK</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLK_SetHCLK &rArr; CLK_WaitClockReady
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[75]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[e6]"></a>CLK_DisablePLL</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[e5]"></a>CLK_EnablePLL</STRONG> (Thumb, 298 bytes, Stack size 40 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLK_EnablePLL &rArr; CLK_WaitClockReady
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_DisablePLL
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[92]"></a>CLK_SetCoreClock</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_WaitClockReady
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[95]"></a>UART_Open</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_Open &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
</UL>

<P><STRONG><a name="[8f]"></a>UART_SetTimeoutCnt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_interrrupt
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_interrrupt
</UL>

<P><STRONG><a name="[96]"></a>UART_Write</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_weld_record
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_timeout
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_setting_2
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_setting_1
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_overload
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_lock_freq
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_head_test
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_head_down
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_early_after_trigger
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_page_SectionVib
</UL>

<P><STRONG><a name="[e7]"></a>TIMER_GetModuleClock</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Delay
</UL>

<P><STRONG><a name="[87]"></a>TIMER_Open</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TIMER_Open &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>TIMER_Delay</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TIMER_Delay &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_TEST_HANDLE
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_TEST_HANDLE
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IRQHandler
</UL>

<P><STRONG><a name="[86]"></a>GPIO_SetMode</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
</UL>

<P><STRONG><a name="[f7]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[73]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[f8]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[f9]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[fa]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>__0printf$5</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[fb]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[e1]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
</UL>

<P><STRONG><a name="[fc]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[fd]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[fe]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[f]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dependencies.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_interrrupt
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_interrrupt
</UL>

<P><STRONG><a name="[70]"></a>stackDump</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stackDump &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>

<P><STRONG><a name="[71]"></a>SendChar</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[ee]"></a>_printf_core</STRONG> (Thumb, 660 bytes, Stack size 104 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
